# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HexMosaic
                                 A QGIS plugin
 Flashpoint Campaigns Game Map Building Tool
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-08-26
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Andrew Spearin / On Target Simulations
        email                : aspearin@ontargetsimulations.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os, json
from qgis.PyQt.QtCore import Qt, QSettings, QLocale, QTranslator, QCoreApplication # type: ignore
from qgis.PyQt.QtWidgets import QAction, QDockWidget, QWidget, QVBoxLayout, QLabel, QPushButton, QHBoxLayout # type: ignore
from qgis.PyQt.QtGui import QIcon # type: ignore
from qgis.core import QgsProject # type: ignore
from qgis.utils import iface # type: ignore

# Initialize Qt resources from file resources.py
# from .resources import *

# Import the code for the DockWidget
from .hexmosaic_dockwidget import HexMosaicDockWidget
import os.path

# --- quick helpers you can replace later ---
def ensure_project_snapping():
    s = iface.mapCanvas().snappingUtils().config()
    s.setMode(s.AllLayers)
    s.setToleranceUnit(s.Pixels)
    s.setTolerance(20)
    s.setIntersectionSnapping(True)
    iface.mapCanvas().snappingUtils().setConfig(s)

def run_build_grid_stub():
    ensure_project_snapping()
    iface.messageBar().pushInfo("HexMosaic", "Build 500 m Grid (stub) — wired.")
    # TODO: call native:creategrid + helpers here

def run_mosaic_mode_stub():
    iface.messageBar().pushInfo("HexMosaic", "Mosaic Mode (stub) — wired.")


class HexMosaic:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        loc = QSettings().value('locale/userLocale', '')
        locale = (loc or QLocale.system().name())[:2]

        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HexMosaic_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&HexMosaic')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'HexMosaic')
        self.toolbar.setObjectName(u'HexMosaic')

        #print "** INITIALIZING HexMosaic"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HexMosaic', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ''
        self.add_action(
            icon_path,
            text=self.tr(u'Build a Flashpoint Campaigns game map'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup when the dock closes."""
        try:
            self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)
        except Exception:
            pass
        self.pluginIsActive = False
        if self.dockwidget is not None:
            self.iface.removeDockWidget(self.dockwidget)
            self.dockwidget.deleteLater()
            self.dockwidget = None

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD HexMosaic"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&HexMosaic'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Load (or reload) the dock and show it fresh each time."""
        # Always rebuild the dock so UI/code changes take effect
        if self.dockwidget is not None:
            self.iface.removeDockWidget(self.dockwidget)
            self.dockwidget.deleteLater()
            self.dockwidget = None

        # Create a new dock instance (this is your code-only dock with buttons)
        self.dockwidget = HexMosaicDockWidget()
        self.dockwidget.closingPlugin.connect(self.onClosePlugin)

        # Show it
        self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
        self.dockwidget.show()

        self.pluginIsActive = True

